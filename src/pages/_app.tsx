import * as React from 'react';

import { CacheProvider } from '@emotion/react';
import CssBaseline from '@mui/material/CssBaseline';
import { ThemeProvider } from '@mui/material/styles';
import Head from 'next/head';
import { QueryClientProvider, Hydrate } from 'react-query';
import { ReactQueryDevtools } from 'react-query/devtools';

import createEmotionCache from '@/app/createEmotionCache';
import theme from '@/app/theme';
import type { AppProps } from '@/app/types';
import AuthProvider from '@/common/context/AuthProvider';
import startMockingRequests from '@/mocks/startMockingRequests';
import { ErrorBoundary } from '@/modules/error-boundary';
import { getQueryClient } from '@/modules/react-query';

if (process.env.NODE_ENV === 'development') {
	startMockingRequests();
}

const clientSideEmotionCache = createEmotionCache();

const App = ({
	Component,
	pageProps,
	emotionCache = clientSideEmotionCache,
	err,
}: AppProps) => {
	const [queryClient] = React.useState(getQueryClient);
	return (
		<ErrorBoundary>
			<Head>
				<meta name="viewport" content="initial-scale=1, width=device-width" />
			</Head>
			<CacheProvider value={emotionCache}>
				<ThemeProvider theme={theme}>
					<CssBaseline />
					<QueryClientProvider client={queryClient}>
						<Hydrate state={pageProps.dehydratedState}>
							<AuthProvider>
								{/* we need to pass the `err` prop to `Component` in case it's the
							component generated by `_error.tsx` so it can log the error to
							sentry if `getInitialProps` is not called. https://github.com/vercel/next.js/issues/8592 */}
								<Component {...pageProps} err={err} />
							</AuthProvider>
						</Hydrate>
						<ReactQueryDevtools />
					</QueryClientProvider>
				</ThemeProvider>
			</CacheProvider>
		</ErrorBoundary>
	);
};

export default App;
